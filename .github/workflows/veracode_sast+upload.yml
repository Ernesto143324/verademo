
name: Veracode SAST - Upload and Scan

on:
  # Scan on Push
  push:
    branches: [ "main" ]
  # Scan on pull (optional)
#  pull_request:
#   # The branches below must be a subset of the branches above
#    branches: [ "main" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
permissions:
  contents: read

jobs:
  # This workflow contains a job to build and submit pipeline scan, you will need to customize the build process accordingly and make sure the artifact you build is used as the file input to the pipeline scan file parameter
  build-and-scan_into_pipeline:
    # The type of runner that the job will run on
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it and copies all sources into ZIP file for submitting for analysis. Replace this section with your applications build steps
    - uses: actions/checkout@v3
      with:
        repository: ''

    - run: zip -r veracode-scan-target.zip ./

    # download the Veracode Static Analysis Pipeline scan jar
    - run: curl --silent --show-error --fail -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
    - run: unzip -o pipeline-scan-LATEST.zip

    - uses: actions/setup-java@v3
      with:
        java-version: 8
        distribution: 'temurin'
      #Command to scan with veracode by Ernesto.
    - name: Veracode SAST Scan
      id: veracode_static_scan
      run: java -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --fail_on_severity="Very High, High, Medium" --file veracode-scan-target.zip
      #Using the option below, we can continue or fail the pipeline.
      continue-on-error: true
    - name: Convert pipeline scan output to SARIF format to see findings into github security tab
      id: convert-to-sarif-format
      uses: veracode/veracode-pipeline-scan-results-to-sarif@ff08ae5b45d5384cb4679932f184c013d34da9be
      with:
        pipeline-results-json: results.json
    - uses: github/codeql-action/upload-sarif@v2
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: veracode-results.sarif

    # Integración de notificaciones Slack
    - name: Slack Notification
      uses: act10ns/slack@v2.0.0
      if: always() # Esto asegura que se envíe una notificación independientemente del resultado del trabajo
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}

  static_analysis_upload_and_scan:
    name: Static Analysis (upload into Veracode condole and Scan)
    runs-on: ubuntu-latest
    
    steps:        
      - name: Check out main branch
        id: checkout
        uses: actions/checkout@v3
        with:
          repository: ''
        
      - name: Build with Maven # Compiling the .war binary from the checked out repo source code to upload to the scanner in the next step
        run: mvn -B package --file app/pom.xml
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it and copies all sources into ZIP file for submitting for analysis. Replace this section with your applications build steps
        
    # Zip in case you want to upload a zip file and put it into filepath parameter.
      - name: Zip App 
        id: Zip
        run: zip -r veracode-scan-target.zip ./
        
      - name: Veracode Upload And Scan
        id: Sast_Scan
        uses: veracode/veracode-uploadandscan-action@0.2.6
        with:
          appname: 'VeraDemo'
          # createprofile: false, indicates that the application not will be created.
          createprofile: true
          # Filepath can be a compiled file (jar or war) or zip file with code.
          #filepath: 'veracode-scan-target.zip' #Put attention of this because if there is incompatible modules, the scans will be not run.
          filepath: 'app/target/verademo.war'        
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
          criticality: 'Medium'
          # scantimeout: 0 , indicates the time to wait for complete scans where 0 is infinite with retry interval set in scanpollinginterval with default of 120 seconds. Use this to introduce break build functionality
          scantimeout: 0 
          #scanpollinginterval: 60 y default is 120. 
  #          createsandbox: 'true'
  #          sandboxname: 'SANDBOXNAME'
  #          scantimeout: 0
  #          exclude: '*.js'
  #          include: '*.war'
  #          criticality: 'VeryHigh'
  
      # Slack Integration
      - name: Slack Notification
        id: Slack_Notification
        uses: act10ns/slack@v2.0.0
        if: always() # Esto asegura que se envíe una notificación independientemente del resultado del trabajo
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
